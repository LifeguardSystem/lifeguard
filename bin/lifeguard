#!/usr/bin/env python3

import _thread
import sys
import multiprocessing
import gunicorn.app.base

sys.path.append(".")

from lifeguard import setup
from lifeguard.scheduler import start_scheduler
from lifeguard.settings import LIFEGUARD_SERVER_PORT

setup()

# Scheduler
_thread.start_new_thread(start_scheduler, ())

# Server
from lifeguard.server import APP


def number_of_workers():
    return (multiprocessing.cpu_count() * 2) + 1


class StandaloneApplication(gunicorn.app.base.BaseApplication):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super().__init__()

    def load_config(self):
        config = {
            key: value
            for key, value in self.options.items()
            if key in self.cfg.settings and value is not None
        }
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


if __name__ == "__main__":
    StandaloneApplication(
        APP,
        {
            "bind": "{}:{}".format("0.0.0.0", LIFEGUARD_SERVER_PORT),
            "workers": number_of_workers(),
        },
    ).run()
