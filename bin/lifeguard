#!/usr/bin/env python3
import argparse
import _thread
import sys
import multiprocessing
import gunicorn.app.base
from tabulate import tabulate

sys.path.append(".")

from lifeguard import setup
from lifeguard.bootstrap import generate_base_project
from lifeguard.context import LIFEGUARD_CONTEXT
from lifeguard.scheduler import start_scheduler
from lifeguard.settings import LIFEGUARD_SERVER_PORT, SETTINGS_MANAGER, SettingsManager


def display_settings():
    data = {"Name": [], "Description": [], "Value": []}

    settings_manager = SettingsManager(SETTINGS_MANAGER.settings)

    for entry in settings_manager.settings:
        data["Name"].append(entry)
        data["Description"].append(settings_manager.settings[entry]["description"])
        data["Value"].append(settings_manager.read_value(entry))

    print(tabulate(data, headers="keys"))


def number_of_workers():
    return (multiprocessing.cpu_count() * 2) + 1


# Scheduler
def scheduler():
    _thread.start_new_thread(start_scheduler, ())


# Server
class StandaloneApplication(gunicorn.app.base.BaseApplication):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super().__init__()

    def load_config(self):
        config = {
            key: value
            for key, value in self.options.items()
            if key in self.cfg.settings and value is not None
        }
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--settings", help="display all plugins settings", action="store_true"
    )
    parser.add_argument(
        "-g",
        "--generate",
        help="generate base of lifeguard instance project",
        action="store_true",
    )
    args = parser.parse_args()

    if args.generate:
        generate_base_project()
        sys.exit(0)

    LIFEGUARD_CONTEXT.only_settings = args.settings

    setup(LIFEGUARD_CONTEXT)

    if args.settings:
        display_settings()
        sys.exit(0)

    scheduler()

    from lifeguard.server import APP

    StandaloneApplication(
        APP,
        {
            "bind": "{}:{}".format("0.0.0.0", LIFEGUARD_SERVER_PORT),
            "workers": number_of_workers(),
        },
    ).run()
